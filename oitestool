#!/bin/bash

### Colors ###
normal="\033[0m"
white="\033[1;37m"
red="\033[0;31m"
lightred="\033[1;31m"
lightgreen="\033[1;32m"
lightcyan="\e[1;36m"
lightmagenta="\e[1;35m"
lightblue="\e[1;34m"
yellow="\e[1;33m"

help() {
  printf "%s\n" "$(basename $0) [OPTIONS] taskname"
  printf "%s\n"   "Options:"
  printf " %s\t%s\n" "-h, --help        " "Show this help"
  printf " %s\t%s\n" "-b, --binary      " "Test binary file without compiling source"
  printf " %s\t%s\n" "-c, --check-by    " "Check answers by the given program:"
  printf " %s\t%s\n" "                  " "* exit status = 0 -> answer correct"
  printf " %s\t%s\n" "                  " "* out.tmp -> given answer"
  printf " %s\t%s\n" "                  " "* in.tmp  -> current input"
  printf " %s\t%s\n" "                  " "* correct.tmp  -> correct output"
  printf " %s\t%s\n" "-i, --input-dir   " "Path to folder with input data (also sets output dir unless specified)"
  printf " %s\t%s\n" "-o, --output-dir  " "Path to folder with output"
  printf " %s\t%s\n" "-g, --generate-out" "Instead checking answers, generate them"
  printf " %s\t%s\n" "-t, --time-limit  " "Set time limit in seconds, default: unlimited"
  printf " %s\t%s\n" "-m, --memory-limit" "Set memory limit in MB, default: unlimited"
  printf " %s\t%s\n" "-f, --test-files  " "Pass test files to be checked. (.in extension is required)"
  printf " %s\t%s\n" "                  " "Format: \"test1 test2 test3 ...\", regex is also acceptable"
  printf " %s\t%s\n" "-s, --save-failed " "Save names of failed tests to file 'failed.txt'"
}

exit_error() {
  printf "${red}%s\n" "! Error: $1"
  exit 1
}

is_integer() {
  case $1 in
    '' | *[!0-9]* | 0[0-9]*) echo "false" ;;
    *) echo "true" ;;
  esac
}

float_div() {
  printf "%s\n" "$1 $2" | awk '{ printf "%.2f", $1 / $2 }'
}

ignore_multi_whitespaces() {
  printf "%s\n" "$(awk '{printf "%s ", $0}' "$1" | sed -e 's/ \+/ /g;s/^ \+//g;$a\')"
}

save_failed_test() {
  if $save_failed ; then
    printf "%s - %s\n" "$1" "$2" >> failed.txt
  fi
}

[ ! -f "/usr/bin/time" ] && exit_error "/usr/bin/time command not found - not installed?"
[ ! -f "/usr/bin/awk" ]  && exit_error "/usr/bin/awk command not found - not installed?"
[ ! -f "/usr/bin/sed" ]  && exit_error "/usr/bin/sed command not found - not installed?"

input_dir=""
output_dir=""
binary=false
generate_out=false
time_limit="unlimited"
memory_limit="unlimited"
task=""
test_files="*.in"
save_failed=false
check_program=""

while [ "$1" != "" ]; do
  case "$1" in
    "--help"|"-h")
      help
      exit
      ;;
    "--binary"|"-b")
      binary=true
      ;;
    "--input-dir"|"-i")
      shift
      input_dir="$1"
      if [ ! -d "${input_dir}" ]; then
        exit_error "${input_dir} - input directory does not exist"
      fi
      if [ "${input_dir##*/}" != "" ]; then
        input_dir="${input_dir}/"
      fi
      ;;
    "--output-dir"|"-o")
      shift
      output_dir="$1"
      if [ ! -d "${output_dir}" ]; then
        exit_error "${output_dir} - output directory does not exist"
      fi
      if [ "${output_dir##*/}" != "" ]; then
        output_dir="${output_dir}/"
      fi
      ;;
    "--generate-out"|"-g")
      generate_out=true
      ;;
    "--timeout"|"-t")
      shift
      time_limit="$1"
      if [ $(is_integer $time_limit) = "false" ]; then
        exit_error "time limit must be an integer"
      fi
      ;;
    "--memory-limit"|"-m")
      shift
      if [ $(is_integer "$1") = "false" ]; then
        exit_error "memory limit must be an integer"
      fi
      memory_limit=$(($1*1024))
      ;;
    "--test-files"|"-f")
      shift
      test_files="$1"
      if [ "${test_files%.in}" = "${test_files}" ]; then
        exit_error ".in extension is requred"
      fi
      ;;
    "--save-failed"|"-s")
      save_failed=true
      ;;
    "--check-by"|"-c")
      shift
      check_program="$1"
      ;;
    *)
      task="$1"
      ;;
  esac
  shift
done

if [ "${task}" = "" ]; then
  exit_error "task name missing"
fi

if [ "${output_dir}" = "" ]; then
  output_dir="${input_dir}"
fi

if $binary ; then
  if [ -f "${task}" ]; then
    printf "%s\n" "Testing earlier compiled task..."
  else
    exit_error "${task} - task binary does not exist or is not executable"
  fi
elif [ ! -f "${task}.cpp" ]; then
  exit_error "${task}.cpp - task source does not exist"
elif [ ! -f Makefile ]; then
  g++ -Wall -O2 -static -std=gnu++0x ${task}.cpp -o ${task}
else
  make ${task}
fi

maxmem=0
maxtime=0
totaltime=0
count_generated=0
count_ok=0
count_fail=0
count_tle=0
count_ans=0
count_mem=0
count_rte=0
count_cancelled=0
count_unknown=0
time_limit_cmd=""
if [ "${time_limit}" != "unlimited" ]; then
  [ ! -f "/usr/bin/timeout" ] && exit_error "in order to set time limit you need 'timeout' command which is not found"
  time_limit_cmd="timeout $time_limit"
fi

tests=($input_dir$test_files)

if [[ ${tests[0]} = "$input_dir$test_files" && ! -f ${tests[0]} ]]; then
  exit_error "no tests found"
fi

printf "%s\n" '{ min=$1/6000; s=$1%6000/100; ss=$1%100; printf("%d:%02d.%02d", min, s, ss) }' > time_format.tmp


printf "${white}%s\n" "------------------ Testing $(basename $task) -------------------"
if $save_failed; then
  printf "Testing %s\n" "$(basename $task) [ $(date) ]" >> failed.txt
fi
for test in "${tests[@]}"; do

  test=${test%%.in}
  test=$(basename $test)

  printf "${white}%s" "${test} "
  
  /usr/bin/time -f "%E %M" -o time.tmp sh -c "${time_limit_cmd} ./${task} < ${input_dir}${test}.in > out.tmp 2> /dev/null" 2> /dev/null
  exit_code=$?

  printf "%s\n" "$(sed '/Command/d' time.tmp)" > time.tmp

  mem=$(cat time.tmp | awk '{ print $2 }')
  if [ $mem -gt $maxmem ]; then
    maxmem=$mem
  fi

  time=$(sed 's/ [0-9]*//' time.tmp)
  timedecimal=$(echo "${time}" | awk 'BEGIN { FS="[:.]" } ; { print ($1*60*100 + $2*100 + $3) }')
  if [ $timedecimal -gt $maxtime ]; then
    maxtime=$timedecimal
  fi
  totaltime=$(($totaltime + $timedecimal))

  printf "${lightcyan}%s${lightmagenta}%s${white}%s" "${time} " "$(float_div $mem 1024)MB " "--> "

  is_tle=false
  case "$exit_code" in
    "0")
      ;;
    "124")
      is_tle=true
      ;;
    "130"|"2")
      ((++count_cancelled))
      printf "${lightred}%s\n" "cancelled (press Ctrl-| to interrupt whole script)" 
      continue
      ;;
    "131"|"3")
      printf "${red}%s\n" "Script interrupted"
      rm *.tmp
      exit 131
      ;;
    "136")
      ((++count_rte))
      printf "${lightred}%s\n" "fail (floating point exception - division by 0??)"
      save_failed_test "${test}" "RTE"
      continue
      ;;
    "139")
      ((++count_rte))
      printf "${lightred}%s\n" "fail (exit code $exit_code - out of range invocation??)"
      save_failed_test "${test}" "RTE"
      continue
      ;;
    *)
      ((++count_rte))
      printf "${lightred}%s\n" "fail (exit code $exit_code)" 
      save_failed_test "${test}" "RTE"
      continue
      ;;
  esac

  if $generate_out ; then
    ((++count_generated))
    cp out.tmp "${output_dir}${test}".out
    printf "${yellow}%s\n" "out generated"
  elif $is_tle ; then
    ((++count_fail))
    ((++count_tle))
    printf "${lightred}%s\n" "time limit exceeded"
    save_failed_test "${test}" "TLE"
  elif [[ "${memory_limit}" != "unlimited" && $mem -gt $memory_limit ]]; then
    ((++count_fail))
    ((++count_mem))
    printf "${lightred}%s\n" "memory limit ($(($memory_limit/1024))MB) exceeded"
    save_failed_test "${test}" "MEM"
  elif [ ! -f "${output_dir}${test}.out" ]; then
    ((++count_unknown))
    printf "${lightblue}%s\n" "unknown (${output_dir##\./}${test}.out does not exist)"
  else
    if [ "${check_program}" == "" ]; then
      diff <(ignore_multi_whitespaces "${output_dir}${test}.out") <(ignore_multi_whitespaces out.tmp) > /dev/null
    else
      cat ${input_dir}${test}.in > in.tmp
      cat ${output_dir}${test}.out > correct.tmp
      ./$check_program
    fi
    if [ $? = 0 ]; then 
      ((++count_ok))
      printf "${lightgreen}%s\n" "ok"
    else
      ((++count_fail))
      ((++count_ans))
      printf "${lightred}%s\n" "wrong answer"
      save_failed_test "${test}" "ANS"
    fi
  fi
  printf "${normal}" 
done

printf "${white}%s\n"        "-------------------- Results ---------------------"
if  $generate_out ; then
  if [ "${output_dir}" = "" ]; then
    output_dir="current directory"
  fi
  printf "${yellow}%s\n"     "${count_generated} outputs generated into ${output_dir}"
else
  printf "${lightgreen}%s%47s\n" "OK:"      "${count_ok}"
  printf "${lightred}%s%45s\n"   "FAIL:"    "${count_fail}"
  [ $count_ans -gt 0 ] && 
  printf "%s%43s\n"              "-> ANS:"  "${count_ans}"
  [ $count_tle -gt 0 ] && 
  printf "%s%43s\n"              "-> TLE:"  "${count_tle}"
  [ $count_mem -gt 0 ] && 
  printf "%s%43s\n"              "-> MEM:"  "${count_mem}"
  [ $count_rte -gt 0 ] &&
  printf "%s%43s\n"              "-> RTE:"  "${count_rte}"
  [ $count_cancelled -gt 0 ] &&
  printf "%s%37s\n"        "   CANCELLED:"  "${count_cancelled}"
  printf "${lightblue}%s%42s\n" "UNKNOWN:"  "${count_unknown}"
fi
maxtime=$(echo $maxtime | awk -f time_format.tmp)
totaltime=$(echo $totaltime | awk -f time_format.tmp)
printf "${lightmagenta}%s%30s\n" "Maximum memory used:"      "$(float_div $maxmem 1024)MB"
printf "${lightcyan}%s%25s\n"    "Maximum calculating time:" "${maxtime}"
printf "${lightcyan}%s%27s\n"    "Total calculating time:"   "${totaltime}"
printf "${white}%s\n"            "--------------------------------------------------"

rm -f *.tmp

exit 0
