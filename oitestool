#!/bin/bash
normal="\033[0m"
white="\033[1;37m"
red="\033[0;31m"
lightred="\033[1;31m"
lightgreen="\033[1;32m"
lightcyan="\e[1;36m"
lightmagenta="\e[1;35m"
lightblue="\e[1;34m"
yellow="\e[1;33m"

help() {
  printf "%s\n" "$(basename $0) [OPTIONS] taskname"
  printf "%s\n"   "Options:"
  printf " %s\t%s\n" "-h, --help        " "Show this help"
  printf " %s\t%s\n" "-b, --binary      " "Test binary file without compiling source"
  printf " %s\t%s\n" "-i, --input-dir   " "Path to folder with input data (also output-dir unless specified)"
  printf " %s\t%s\n" "-o, --output-dir  " "Path to folder with output"
  printf " %s\t%s\n" "-g, --generate-out" "Instead checking answers, generate them"
  printf " %s\t%s\n" "-t, --timeout"      "Set timeout in seconds, default: unlimited"
  printf " %s\t%s\n" "-m, --memory-limit" "Set memory limit, default: unlimited"
}

exit_error() {
  printf "${red}%s\n" "! Error: $1"
  exit 1
}

input_dir=""
output_dir=""
binary=false
generate_out=false
time_limit="unlimited"
memory_limit="unlimited"
task=""

while [ "$1" != "" ]; do
  case "$1" in
    "--help"|"-h")
      help
      exit
      ;;
    "--binary"|"-b")
      binary=true
      ;;
    "--input-dir"|"-i")
      shift
      input_dir="$1"
      if [ ! -d "${input_dir}" ]; then
        exit_error "${input_dir} - input directory does not exist"
      fi
      if [ "${input_dir##*/}" != "" ]; then
        input_dir="${input_dir}/"
      fi
      ;;
    "--output-dir"|"-o")
      shift
      output_dir="$1"
      if [ ! -d "${output_dir}" ]; then
        exit_error "${output_dir} - output directory does not exist"
      fi
      if [ "${output_dir##*/}" != "" ]; then
        output_dir="${output_dir}/"
      fi
      ;;
    "--generate-out"|"-g")
      generate_out=true
      ;;
    "--timeout"|"-t")
      shift
      time_limit="$1"
      ;;
    "--memory-limit"|"-m")
      shift
      memory_limit="$1"
      ;;
    *)
      task="$1"
      ;;
  esac
  shift
done

if [ "${task}" = "" ]; then
  exit_error "task name missing"
fi

if [ "${output_dir}" = "" ]; then
  output_dir="${input_dir}"
fi

if $binary ; then
  if [ -f "${task}" ]; then
    printf "%s\n" "Testing earlier compiled task..."
  else
    exit_error "${task} - task binary does not exist or is not executable"
  fi
elif [ ! -f "${task}.cpp" ]; then
  exit_error "${task}.cpp - task source does not exist"
elif [ ! -f Makefile ]; then
  g++ -Wall -O2 -static -std=gnu++0x ${task}.cpp -o ${task}
else
  make ${task}
fi

maxmem=0
maxtime=0
totaltime=0
count_generated=0
count_ok=0
count_fail=0
count_tle=0
count_ans=0
count_mem=0
count_rte=0
count_cancelled=0
count_unknown=0
time_limit_cmd=""
if [ "${time_limit}" != "unlimited" ]; then
  time_limit_cmd="timeout $time_limit"
fi

tests=($input_dir*.in)

if [ ${tests[0]} == "$input_dir*.in" ]; then
  exit_error "no tests found"
fi

printf "${white}%s\n" "------------------- Testing $(basename $task) ---------------------"
for test in "${tests[@]}"; do

  test=${test%%.in}
  test=$(basename $test)

  printf "${white}%s" "${test} "
  
  /usr/bin/time -f "%E %M" -o time.tmp sh -c "${time_limit_cmd} ./${task} < ${input_dir}${test}.in > out.tmp 2> /dev/null" 2> /dev/null
  exit_code=$?

  printf "%s\n" "$(sed '/Command/d' time.tmp)" > time.tmp

  mem=$(cat time.tmp | awk '{ printf("%.2f", ($2 / 1024)) }')
  if [[ $mem > $maxmem ]]; then
    maxmem=$mem
  fi

  time=$(sed 's/ [0-9]*//' time.tmp)
  timedecimal=$(echo "${time}" | awk 'begin { fs="[:.]" } ; { print ($1*60*1000 + $2*1000 + $3) }')
  if [[ $timedecimal > $maxtime ]]; then
    maxtime=$timedecimal
  fi
  totaltime=$(($totaltime + $timedecimal))

  printf "${lightcyan}%s${lightmagenta}%s${white}%s" "${time}s " "${mem}MB " "--> "

  is_tle=false
  case "$exit_code" in
    "0")
      ;;
    "124")
      is_tle=true
      ;;
    "130")
      ((++count_cancelled))
      printf "${lightred}%s\n" "cancelled (press Ctrl-| to interrupt whole script)" 
      continue
      ;;
    "131")
      printf "${red}%s\n" "Script interrupted"
      exit 131
      ;;
    "136")
      ((++count_rte))
      printf "${lightred}%s\n" "fail (floating point exception - division by 0??)"
      continue
      ;;
    "139")
      ((++count_rte))
      printf "${lightred}%s\n" "fail (exit code $exit_code - out of range invocation??)"
      continue
      ;;
    *)
      ((++count_rte))
      printf "${lightred}%s\n" "fail (exit code $exit_code)" 
      continue
      ;;
  esac

  if $generate_out ; then
    ((++count_generated))
    cp out.tmp "${output_dir}${test}".out
    printf "${yellow}%s\n" "out generated"
  elif $is_tle ; then
    ((++count_fail))
    ((++count_tle))
    printf "${lightred}%s\n" "time limit exceeded"
  elif [[ ("$memory_limit" != "unlimited") && ! $(printf "%s\n" "$mem > $memory_limit" | bc) ]]; then
      ((++count_fail))
      ((++count_mem))
      printf "${lightred}%s\n" "memory limit (${memory_limit}MB) exceeded"
  elif [ ! -f "${output_dir}${test}.out" ]; then
    ((++count_unknown))
    printf "${lightblue}%s\n" "unknown (${output_dir##\./}${test}.out does not exist)"
  else
    diff <(sed -e '$a\' "${output_dir}${test}.out") <(sed -e '$a\' out.tmp) > /dev/null
    if [ $? = 0 ]; then 
      ((++count_ok))
      printf "${lightgreen}%s\n" "ok"
    else
      ((++count_fail))
      ((++count_ans))
      printf "${lightred}%s\n" "wrong answer" 
    fi
  fi

  printf "${normal}" 
done

printf "${white}%s\n"        "--------------------- Results -----------------------"
if  $generate_out ; then
  if [ $output_dir  = "" ]; then
    output_dir="current directory"
  fi
  printf "${yellow}%s\n"     "${count_generated} outputs generated into ${output_dir}"
else
  printf "${lightgreen}%s\n" "OK:                                              ${count_ok}"
  printf "${lightred}%s\n"   "FAIL:                                            ${count_fail}"
  [ $count_ans -gt 0 ] && 
  printf "%s\n"              "   ANS:                                          ${count_ans}"
  [ $count_tle -gt 0 ] && 
  printf "%s\n"              "   TLE:                                          ${count_tle}"
  [ $count_mem -gt 0 ] && 
  printf "%s\n"              "   MEM:                                          ${count_mem}"
  [ $count_rte -gt 0 ] &&
  printf "%s\n"              "   RTE:                                          ${count_rte}"
  [ $count_cancelled -gt 0 ] &&
  printf "%s\n"              "   CANCELLED:                                    ${count_cancelled}"
  printf "${lightblue}%s\n"  "UNKNOWN:                                         ${count_unknown}"
fi
printf "${lightmagenta}%s\n" "Maximum memory used:                             ${maxmem}MB"
printf "${lightcyan}%s\n"    "Maximum calculating time:                        $(($maxtime / 1000))s"
printf "${lightcyan}%s\n"    "Total calculating time:                          $(($totaltime / 1000))s"
printf "${white}%s\n"        "-----------------------------------------------------"

rm -f *.tmp